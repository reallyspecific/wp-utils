(()=>{var o=class{constructor(s){this.props={closeOnClickOutside:!0,root:document.body,...s},this.dialog=null,this.addListener("close-dialog",this.close)}clickListener(s){!s.target.closest(".rs-util-settings-dialog__content")&&this.props.closeOnClickOutside&&this.close();let t=s.target.closest("button");t&&t.dataset.action&&document.dispatchEvent(new CustomEvent("dialog-action."+t.dataset.action,{detail:{dialog:this.dialog,button:t}}))}addListener(s,t){document.addEventListener("dialog-action."+s,t)}close({detail:s}){let{dialog:t}=s||{};document.body.classList.remove("rs-util-settings-dialog-open"),t&&t.remove()}open(){document.body.classList.add("rs-util-settings-dialog-open"),this.render()}render(s={}){s={...this.props,...s};let t=document.createElement("div");return t.classList.add("rs-util-settings-dialog"),t.innerHTML=`
			<div class="rs-util-settings-dialog__content">
				<div class="rs-util-settings-dialog__header">
					<h2>${s.title}</h2>
					<button type="button" class="rs-util-settings-dialog__close" data-action="close-dialog">Close</button>
				</div>
				<div class="rs-util-settings-dialog__body">
					${s.content}
					<div class="rs-util-settings-dialog__actions">
						${s.actions.map(e=>{let i=document.createElement("button");return i.type="button",i.classList.add("button","rs-util-settings-dialog__action"),e.primary&&i.classList.add("button-primary"),e.classes&&i.classList.add(...e.classes),e.action&&(i.dataset.action=e.action),i.innerHTML=e.label,i.outerHTML}).join("")}
					</div>
				</div>
			</div>
		`,this.dialog=t,this.props.root.appendChild(t),t.addEventListener("click",this.clickListener.bind(this)),t}};})();
//# sourceMappingURL=class.dialog.min.js.map
